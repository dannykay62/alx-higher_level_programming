# 4-print_square.txt

=============================
Doctest for 4-print_square.py
=============================

This module deines a function ``print_square`` that prints a square with the character #.

Usage
=====

Prints squares using the ``#`` character. The parameter ``size`` represents the height and width of the square.

::

	>>> print_square = __import__('4-print_square').print_square
	>>> print_square(1)
	#

::

	>>> print_square(4)
	####
	####
	####
	####

::

	>>> print_square(10)
	##########
	##########
	##########
	##########
	##########
	##########
	##########
	##########
	##########
	##########

If ``size`` is zero, function prints nothing.

::

	>>> print_square(0)

Invalid Sizes
=============

The parameter ``size`` must be an integer. Otherwise, The function raises a TypeError.

::

	>>> print_square("not sn integer")
	Traceback (most recent call last):
	TypeError: size must be an integer

::

	>>> print_square(5.5)
	Traceback (most recent call last):
	TypeError: size must be an integer

::

	>>> print_square(None)
	Traceback (most recent call last):
	TypeError: size must be an integer

If ``size`` is less than 0, raises a ValueError

::

	>>> print_square(-7)
	Traceback (most recent call last):
	ValueError: size must be >= 0

Note - type-checking occurs before value-checking.

::

	>>> print_square(-7.5)
	Traceback (most recent call last):
	TypeError: size must be an integer

At least one argument must be provided

::

	>>> print_square()
	Traceback (most recent call last):
	TypeError: print_square() missing 1 required positional argument: 'size'
